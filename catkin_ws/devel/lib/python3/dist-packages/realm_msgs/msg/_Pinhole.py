# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from realm_msgs/Pinhole.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import std_msgs.msg

class Pinhole(genpy.Message):
  _md5sum = "89c97ad67d741eb4b47e5809398cd3a4"
  _type = "realm_msgs/Pinhole"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """#####################################################
# A message containing general pinhole camera model #
#####################################################

# Image dimensions
std_msgs/UInt32 width
std_msgs/UInt32 height

# Principal point
std_msgs/Float64 cx
std_msgs/Float64 cy

# Focal length
std_msgs/Float64 fx
std_msgs/Float64 fy

# Radial distortion parameters
std_msgs/Float64 k1
std_msgs/Float64 k2
std_msgs/Float64 p1
std_msgs/Float64 p2
std_msgs/Float64 k3

================================================================================
MSG: std_msgs/UInt32
uint32 data
================================================================================
MSG: std_msgs/Float64
float64 data"""
  __slots__ = ['width','height','cx','cy','fx','fy','k1','k2','p1','p2','k3']
  _slot_types = ['std_msgs/UInt32','std_msgs/UInt32','std_msgs/Float64','std_msgs/Float64','std_msgs/Float64','std_msgs/Float64','std_msgs/Float64','std_msgs/Float64','std_msgs/Float64','std_msgs/Float64','std_msgs/Float64']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       width,height,cx,cy,fx,fy,k1,k2,p1,p2,k3

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(Pinhole, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.width is None:
        self.width = std_msgs.msg.UInt32()
      if self.height is None:
        self.height = std_msgs.msg.UInt32()
      if self.cx is None:
        self.cx = std_msgs.msg.Float64()
      if self.cy is None:
        self.cy = std_msgs.msg.Float64()
      if self.fx is None:
        self.fx = std_msgs.msg.Float64()
      if self.fy is None:
        self.fy = std_msgs.msg.Float64()
      if self.k1 is None:
        self.k1 = std_msgs.msg.Float64()
      if self.k2 is None:
        self.k2 = std_msgs.msg.Float64()
      if self.p1 is None:
        self.p1 = std_msgs.msg.Float64()
      if self.p2 is None:
        self.p2 = std_msgs.msg.Float64()
      if self.k3 is None:
        self.k3 = std_msgs.msg.Float64()
    else:
      self.width = std_msgs.msg.UInt32()
      self.height = std_msgs.msg.UInt32()
      self.cx = std_msgs.msg.Float64()
      self.cy = std_msgs.msg.Float64()
      self.fx = std_msgs.msg.Float64()
      self.fy = std_msgs.msg.Float64()
      self.k1 = std_msgs.msg.Float64()
      self.k2 = std_msgs.msg.Float64()
      self.p1 = std_msgs.msg.Float64()
      self.p2 = std_msgs.msg.Float64()
      self.k3 = std_msgs.msg.Float64()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_2I9d().pack(_x.width.data, _x.height.data, _x.cx.data, _x.cy.data, _x.fx.data, _x.fy.data, _x.k1.data, _x.k2.data, _x.p1.data, _x.p2.data, _x.k3.data))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.width is None:
        self.width = std_msgs.msg.UInt32()
      if self.height is None:
        self.height = std_msgs.msg.UInt32()
      if self.cx is None:
        self.cx = std_msgs.msg.Float64()
      if self.cy is None:
        self.cy = std_msgs.msg.Float64()
      if self.fx is None:
        self.fx = std_msgs.msg.Float64()
      if self.fy is None:
        self.fy = std_msgs.msg.Float64()
      if self.k1 is None:
        self.k1 = std_msgs.msg.Float64()
      if self.k2 is None:
        self.k2 = std_msgs.msg.Float64()
      if self.p1 is None:
        self.p1 = std_msgs.msg.Float64()
      if self.p2 is None:
        self.p2 = std_msgs.msg.Float64()
      if self.k3 is None:
        self.k3 = std_msgs.msg.Float64()
      end = 0
      _x = self
      start = end
      end += 80
      (_x.width.data, _x.height.data, _x.cx.data, _x.cy.data, _x.fx.data, _x.fy.data, _x.k1.data, _x.k2.data, _x.p1.data, _x.p2.data, _x.k3.data,) = _get_struct_2I9d().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_2I9d().pack(_x.width.data, _x.height.data, _x.cx.data, _x.cy.data, _x.fx.data, _x.fy.data, _x.k1.data, _x.k2.data, _x.p1.data, _x.p2.data, _x.k3.data))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.width is None:
        self.width = std_msgs.msg.UInt32()
      if self.height is None:
        self.height = std_msgs.msg.UInt32()
      if self.cx is None:
        self.cx = std_msgs.msg.Float64()
      if self.cy is None:
        self.cy = std_msgs.msg.Float64()
      if self.fx is None:
        self.fx = std_msgs.msg.Float64()
      if self.fy is None:
        self.fy = std_msgs.msg.Float64()
      if self.k1 is None:
        self.k1 = std_msgs.msg.Float64()
      if self.k2 is None:
        self.k2 = std_msgs.msg.Float64()
      if self.p1 is None:
        self.p1 = std_msgs.msg.Float64()
      if self.p2 is None:
        self.p2 = std_msgs.msg.Float64()
      if self.k3 is None:
        self.k3 = std_msgs.msg.Float64()
      end = 0
      _x = self
      start = end
      end += 80
      (_x.width.data, _x.height.data, _x.cx.data, _x.cy.data, _x.fx.data, _x.fy.data, _x.k1.data, _x.k2.data, _x.p1.data, _x.p2.data, _x.k3.data,) = _get_struct_2I9d().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2I9d = None
def _get_struct_2I9d():
    global _struct_2I9d
    if _struct_2I9d is None:
        _struct_2I9d = struct.Struct("<2I9d")
    return _struct_2I9d
