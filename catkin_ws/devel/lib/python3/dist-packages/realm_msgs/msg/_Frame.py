# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from realm_msgs/Frame.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import geometry_msgs.msg
import realm_msgs.msg
import sensor_msgs.msg
import std_msgs.msg

class Frame(genpy.Message):
  _md5sum = "5c5634361f210a95be3b4183d672f7a7"
  _type = "realm_msgs/Frame"
  _has_header = True  # flag to mark the presence of a Header object
  _full_text = """#######################################################
# A message containing basic REALM frame informations #
#######################################################

##################### Sensor data #####################
# (required) Header containing message meta data
std_msgs/Header header

# (required) Unique name/id of the acquiring camera
std_msgs/String camera_id

# (required) Frame id which is constant over the whole stage processing. Should only be set once
std_msgs/UInt32 stage_id

# (required) Timestamp of the acquisition. Is not the same as ros message timestamp!
std_msgs/UInt64 timestamp

# (required) Imagedata containing the compressed camera data
sensor_msgs/CompressedImage imagedata

# (required) Camera_model containing pinhole parameters of capturing cam
realm_msgs/Pinhole camera_model

# (required) Camera orientation as quaternion
geometry_msgs/Quaternion orientation

# (required) Gnss data containing geodetic informations of the image
sensor_msgs/NavSatFix gpsdata

# (optional) Point cloud of the observed surface
realm_msgs/PointCloud sparse_cloud

# (optional) Depthmap of the observed scene
realm_msgs/Depthmap depthmap

# (optional) Surface model as grid map of the frame projection
realm_msgs/CvGridMap surface_model

# (optional) Orthophoto of the frame
realm_msgs/CvGridMap orthophoto

# (optional) Heading in Degree, required if mapping on GNSS only
std_msgs/Float32 heading

# (optional) Visual pose of the camera in local coordinate frame, required e.g. for georeference updates
geometry_msgs/Pose visual_pose

# (optional) Transformation from the visual to the geographic world
realm_msgs/Georeference georeference

######################## Flags ########################
# Reset flag: set true, if following stage should be resetted
std_msgs/Bool do_reset

# Accurate pose flag: set true, if pose is suited for dense reconstruction
std_msgs/Bool has_accurate_pose

# Is key frame flag: set true, if frame was marked as keyframe
std_msgs/Bool is_keyframe

# Is georeferenced flag: set true, if frame was successfully georeferenced
std_msgs/Bool is_georeferenced

# Flag to check if surface was computed with 2.5D elevation or not
std_msgs/Bool is_surface_elevated
================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
string frame_id

================================================================================
MSG: std_msgs/String
string data

================================================================================
MSG: std_msgs/UInt32
uint32 data
================================================================================
MSG: std_msgs/UInt64
uint64 data
================================================================================
MSG: sensor_msgs/CompressedImage
# This message contains a compressed image

Header header        # Header timestamp should be acquisition time of image
                     # Header frame_id should be optical frame of camera
                     # origin of frame should be optical center of camera
                     # +x should point to the right in the image
                     # +y should point down in the image
                     # +z should point into to plane of the image

string format        # Specifies the format of the data
                     #   Acceptable values:
                     #     jpeg, png
uint8[] data         # Compressed image buffer

================================================================================
MSG: realm_msgs/Pinhole
#####################################################
# A message containing general pinhole camera model #
#####################################################

# Image dimensions
std_msgs/UInt32 width
std_msgs/UInt32 height

# Principal point
std_msgs/Float64 cx
std_msgs/Float64 cy

# Focal length
std_msgs/Float64 fx
std_msgs/Float64 fy

# Radial distortion parameters
std_msgs/Float64 k1
std_msgs/Float64 k2
std_msgs/Float64 p1
std_msgs/Float64 p2
std_msgs/Float64 k3

================================================================================
MSG: std_msgs/Float64
float64 data
================================================================================
MSG: geometry_msgs/Quaternion
# This represents an orientation in free space in quaternion form.

float64 x
float64 y
float64 z
float64 w

================================================================================
MSG: sensor_msgs/NavSatFix
# Navigation Satellite fix for any Global Navigation Satellite System
#
# Specified using the WGS 84 reference ellipsoid

# header.stamp specifies the ROS time for this measurement (the
#        corresponding satellite time may be reported using the
#        sensor_msgs/TimeReference message).
#
# header.frame_id is the frame of reference reported by the satellite
#        receiver, usually the location of the antenna.  This is a
#        Euclidean frame relative to the vehicle, not a reference
#        ellipsoid.
Header header

# satellite fix status information
NavSatStatus status

# Latitude [degrees]. Positive is north of equator; negative is south.
float64 latitude

# Longitude [degrees]. Positive is east of prime meridian; negative is west.
float64 longitude

# Altitude [m]. Positive is above the WGS 84 ellipsoid
# (quiet NaN if no altitude is available).
float64 altitude

# Position covariance [m^2] defined relative to a tangential plane
# through the reported position. The components are East, North, and
# Up (ENU), in row-major order.
#
# Beware: this coordinate system exhibits singularities at the poles.

float64[9] position_covariance

# If the covariance of the fix is known, fill it in completely. If the
# GPS receiver provides the variance of each measurement, put them
# along the diagonal. If only Dilution of Precision is available,
# estimate an approximate covariance from that.

uint8 COVARIANCE_TYPE_UNKNOWN = 0
uint8 COVARIANCE_TYPE_APPROXIMATED = 1
uint8 COVARIANCE_TYPE_DIAGONAL_KNOWN = 2
uint8 COVARIANCE_TYPE_KNOWN = 3

uint8 position_covariance_type

================================================================================
MSG: sensor_msgs/NavSatStatus
# Navigation Satellite fix status for any Global Navigation Satellite System

# Whether to output an augmented fix is determined by both the fix
# type and the last time differential corrections were received.  A
# fix is valid when status >= STATUS_FIX.

int8 STATUS_NO_FIX =  -1        # unable to fix position
int8 STATUS_FIX =      0        # unaugmented fix
int8 STATUS_SBAS_FIX = 1        # with satellite-based augmentation
int8 STATUS_GBAS_FIX = 2        # with ground-based augmentation

int8 status

# Bits defining which Global Navigation Satellite System signals were
# used by the receiver.

uint16 SERVICE_GPS =     1
uint16 SERVICE_GLONASS = 2
uint16 SERVICE_COMPASS = 4      # includes BeiDou.
uint16 SERVICE_GALILEO = 8

uint16 service

================================================================================
MSG: realm_msgs/PointCloud
######################################################
# A message containing basic REALM sparse cloud data #
######################################################

# (required) Header containing message meta data
std_msgs/Header header

# (required) Vector of unique point ids
uint32[] point_ids

# (required) Data of the sparse cloud structured as cv::Mat with row(i) = x,y,z
sensor_msgs/Image points
================================================================================
MSG: sensor_msgs/Image
# This message contains an uncompressed image
# (0, 0) is at top-left corner of image
#

Header header        # Header timestamp should be acquisition time of image
                     # Header frame_id should be optical frame of camera
                     # origin of frame should be optical center of camera
                     # +x should point to the right in the image
                     # +y should point down in the image
                     # +z should point into to plane of the image
                     # If the frame_id here and the frame_id of the CameraInfo
                     # message associated with the image conflict
                     # the behavior is undefined

uint32 height         # image height, that is, number of rows
uint32 width          # image width, that is, number of columns

# The legal values for encoding are in file src/image_encodings.cpp
# If you want to standardize a new string format, join
# ros-users@lists.sourceforge.net and send an email proposing a new encoding.

string encoding       # Encoding of pixels -- channel meaning, ordering, size
                      # taken from the list of strings in include/sensor_msgs/image_encodings.h

uint8 is_bigendian    # is this data bigendian?
uint32 step           # Full row length in bytes
uint8[] data          # actual matrix data, size is (step * rows)

================================================================================
MSG: realm_msgs/Depthmap
##################################################
# A message containing basic REALM depthmap data #
##################################################

# (required) Header containing message meta data
std_msgs/Header header

# (required) Camera_model containing pinhole parameters of capturing cam
realm_msgs/Pinhole camera_model

# (required) Pose during acquisition
geometry_msgs/Pose pose

# (required) Depth information
sensor_msgs/Image data
================================================================================
MSG: geometry_msgs/Pose
# A representation of pose in free space, composed of position and orientation. 
Point position
Quaternion orientation

================================================================================
MSG: geometry_msgs/Point
# This contains the position of a point in free space
float64 x
float64 y
float64 z

================================================================================
MSG: realm_msgs/CvGridMap
# Header for time and frame
Header header

# CvGridMap uni resolution in x-/y-dir
float64 resolution

# CvGridMap position of roi
geometry_msgs/Point pos

# CvGridMap length of roi in x
float64 length_x

# CvGridMap length of roi in y
float64 length_y

# CvGridMap layer names
string[] layers

# CvGridMap layer data
sensor_msgs/Image[] data

================================================================================
MSG: std_msgs/Float32
float32 data
================================================================================
MSG: realm_msgs/Georeference
#####################################################
# A message containing georeference informations    #
#####################################################

# Following message is basically a similarity transformation

geometry_msgs/Transform transform
std_msgs/Float64[] scale

================================================================================
MSG: geometry_msgs/Transform
# This represents the transform between two coordinate frames in free space.

Vector3 translation
Quaternion rotation

================================================================================
MSG: geometry_msgs/Vector3
# This represents a vector in free space. 
# It is only meant to represent a direction. Therefore, it does not
# make sense to apply a translation to it (e.g., when applying a 
# generic rigid transformation to a Vector3, tf2 will only apply the
# rotation). If you want your data to be translatable too, use the
# geometry_msgs/Point message instead.

float64 x
float64 y
float64 z
================================================================================
MSG: std_msgs/Bool
bool data"""
  __slots__ = ['header','camera_id','stage_id','timestamp','imagedata','camera_model','orientation','gpsdata','sparse_cloud','depthmap','surface_model','orthophoto','heading','visual_pose','georeference','do_reset','has_accurate_pose','is_keyframe','is_georeferenced','is_surface_elevated']
  _slot_types = ['std_msgs/Header','std_msgs/String','std_msgs/UInt32','std_msgs/UInt64','sensor_msgs/CompressedImage','realm_msgs/Pinhole','geometry_msgs/Quaternion','sensor_msgs/NavSatFix','realm_msgs/PointCloud','realm_msgs/Depthmap','realm_msgs/CvGridMap','realm_msgs/CvGridMap','std_msgs/Float32','geometry_msgs/Pose','realm_msgs/Georeference','std_msgs/Bool','std_msgs/Bool','std_msgs/Bool','std_msgs/Bool','std_msgs/Bool']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header,camera_id,stage_id,timestamp,imagedata,camera_model,orientation,gpsdata,sparse_cloud,depthmap,surface_model,orthophoto,heading,visual_pose,georeference,do_reset,has_accurate_pose,is_keyframe,is_georeferenced,is_surface_elevated

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(Frame, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.camera_id is None:
        self.camera_id = std_msgs.msg.String()
      if self.stage_id is None:
        self.stage_id = std_msgs.msg.UInt32()
      if self.timestamp is None:
        self.timestamp = std_msgs.msg.UInt64()
      if self.imagedata is None:
        self.imagedata = sensor_msgs.msg.CompressedImage()
      if self.camera_model is None:
        self.camera_model = realm_msgs.msg.Pinhole()
      if self.orientation is None:
        self.orientation = geometry_msgs.msg.Quaternion()
      if self.gpsdata is None:
        self.gpsdata = sensor_msgs.msg.NavSatFix()
      if self.sparse_cloud is None:
        self.sparse_cloud = realm_msgs.msg.PointCloud()
      if self.depthmap is None:
        self.depthmap = realm_msgs.msg.Depthmap()
      if self.surface_model is None:
        self.surface_model = realm_msgs.msg.CvGridMap()
      if self.orthophoto is None:
        self.orthophoto = realm_msgs.msg.CvGridMap()
      if self.heading is None:
        self.heading = std_msgs.msg.Float32()
      if self.visual_pose is None:
        self.visual_pose = geometry_msgs.msg.Pose()
      if self.georeference is None:
        self.georeference = realm_msgs.msg.Georeference()
      if self.do_reset is None:
        self.do_reset = std_msgs.msg.Bool()
      if self.has_accurate_pose is None:
        self.has_accurate_pose = std_msgs.msg.Bool()
      if self.is_keyframe is None:
        self.is_keyframe = std_msgs.msg.Bool()
      if self.is_georeferenced is None:
        self.is_georeferenced = std_msgs.msg.Bool()
      if self.is_surface_elevated is None:
        self.is_surface_elevated = std_msgs.msg.Bool()
    else:
      self.header = std_msgs.msg.Header()
      self.camera_id = std_msgs.msg.String()
      self.stage_id = std_msgs.msg.UInt32()
      self.timestamp = std_msgs.msg.UInt64()
      self.imagedata = sensor_msgs.msg.CompressedImage()
      self.camera_model = realm_msgs.msg.Pinhole()
      self.orientation = geometry_msgs.msg.Quaternion()
      self.gpsdata = sensor_msgs.msg.NavSatFix()
      self.sparse_cloud = realm_msgs.msg.PointCloud()
      self.depthmap = realm_msgs.msg.Depthmap()
      self.surface_model = realm_msgs.msg.CvGridMap()
      self.orthophoto = realm_msgs.msg.CvGridMap()
      self.heading = std_msgs.msg.Float32()
      self.visual_pose = geometry_msgs.msg.Pose()
      self.georeference = realm_msgs.msg.Georeference()
      self.do_reset = std_msgs.msg.Bool()
      self.has_accurate_pose = std_msgs.msg.Bool()
      self.is_keyframe = std_msgs.msg.Bool()
      self.is_georeferenced = std_msgs.msg.Bool()
      self.is_surface_elevated = std_msgs.msg.Bool()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.camera_id.data
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_IQ3I().pack(_x.stage_id.data, _x.timestamp.data, _x.imagedata.header.seq, _x.imagedata.header.stamp.secs, _x.imagedata.header.stamp.nsecs))
      _x = self.imagedata.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.imagedata.format
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.imagedata.data
      length = len(_x)
      # - if encoded as a list instead, serialize as bytes instead of string
      if type(_x) in [list, tuple]:
        buff.write(struct.Struct('<I%sB'%length).pack(length, *_x))
      else:
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_2I13d3I().pack(_x.camera_model.width.data, _x.camera_model.height.data, _x.camera_model.cx.data, _x.camera_model.cy.data, _x.camera_model.fx.data, _x.camera_model.fy.data, _x.camera_model.k1.data, _x.camera_model.k2.data, _x.camera_model.p1.data, _x.camera_model.p2.data, _x.camera_model.k3.data, _x.orientation.x, _x.orientation.y, _x.orientation.z, _x.orientation.w, _x.gpsdata.header.seq, _x.gpsdata.header.stamp.secs, _x.gpsdata.header.stamp.nsecs))
      _x = self.gpsdata.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_bH3d().pack(_x.gpsdata.status.status, _x.gpsdata.status.service, _x.gpsdata.latitude, _x.gpsdata.longitude, _x.gpsdata.altitude))
      buff.write(_get_struct_9d().pack(*self.gpsdata.position_covariance))
      _x = self
      buff.write(_get_struct_B3I().pack(_x.gpsdata.position_covariance_type, _x.sparse_cloud.header.seq, _x.sparse_cloud.header.stamp.secs, _x.sparse_cloud.header.stamp.nsecs))
      _x = self.sparse_cloud.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      length = len(self.sparse_cloud.point_ids)
      buff.write(_struct_I.pack(length))
      pattern = '<%sI'%length
      buff.write(struct.Struct(pattern).pack(*self.sparse_cloud.point_ids))
      _x = self
      buff.write(_get_struct_3I().pack(_x.sparse_cloud.points.header.seq, _x.sparse_cloud.points.header.stamp.secs, _x.sparse_cloud.points.header.stamp.nsecs))
      _x = self.sparse_cloud.points.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_2I().pack(_x.sparse_cloud.points.height, _x.sparse_cloud.points.width))
      _x = self.sparse_cloud.points.encoding
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_BI().pack(_x.sparse_cloud.points.is_bigendian, _x.sparse_cloud.points.step))
      _x = self.sparse_cloud.points.data
      length = len(_x)
      # - if encoded as a list instead, serialize as bytes instead of string
      if type(_x) in [list, tuple]:
        buff.write(struct.Struct('<I%sB'%length).pack(length, *_x))
      else:
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_3I().pack(_x.depthmap.header.seq, _x.depthmap.header.stamp.secs, _x.depthmap.header.stamp.nsecs))
      _x = self.depthmap.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_2I16d3I().pack(_x.depthmap.camera_model.width.data, _x.depthmap.camera_model.height.data, _x.depthmap.camera_model.cx.data, _x.depthmap.camera_model.cy.data, _x.depthmap.camera_model.fx.data, _x.depthmap.camera_model.fy.data, _x.depthmap.camera_model.k1.data, _x.depthmap.camera_model.k2.data, _x.depthmap.camera_model.p1.data, _x.depthmap.camera_model.p2.data, _x.depthmap.camera_model.k3.data, _x.depthmap.pose.position.x, _x.depthmap.pose.position.y, _x.depthmap.pose.position.z, _x.depthmap.pose.orientation.x, _x.depthmap.pose.orientation.y, _x.depthmap.pose.orientation.z, _x.depthmap.pose.orientation.w, _x.depthmap.data.header.seq, _x.depthmap.data.header.stamp.secs, _x.depthmap.data.header.stamp.nsecs))
      _x = self.depthmap.data.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_2I().pack(_x.depthmap.data.height, _x.depthmap.data.width))
      _x = self.depthmap.data.encoding
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_BI().pack(_x.depthmap.data.is_bigendian, _x.depthmap.data.step))
      _x = self.depthmap.data.data
      length = len(_x)
      # - if encoded as a list instead, serialize as bytes instead of string
      if type(_x) in [list, tuple]:
        buff.write(struct.Struct('<I%sB'%length).pack(length, *_x))
      else:
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_3I().pack(_x.surface_model.header.seq, _x.surface_model.header.stamp.secs, _x.surface_model.header.stamp.nsecs))
      _x = self.surface_model.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_6d().pack(_x.surface_model.resolution, _x.surface_model.pos.x, _x.surface_model.pos.y, _x.surface_model.pos.z, _x.surface_model.length_x, _x.surface_model.length_y))
      length = len(self.surface_model.layers)
      buff.write(_struct_I.pack(length))
      for val1 in self.surface_model.layers:
        length = len(val1)
        if python3 or type(val1) == unicode:
          val1 = val1.encode('utf-8')
          length = len(val1)
        buff.write(struct.Struct('<I%ss'%length).pack(length, val1))
      length = len(self.surface_model.data)
      buff.write(_struct_I.pack(length))
      for val1 in self.surface_model.data:
        _v1 = val1.header
        _x = _v1.seq
        buff.write(_get_struct_I().pack(_x))
        _v2 = _v1.stamp
        _x = _v2
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = _v1.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = val1
        buff.write(_get_struct_2I().pack(_x.height, _x.width))
        _x = val1.encoding
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = val1
        buff.write(_get_struct_BI().pack(_x.is_bigendian, _x.step))
        _x = val1.data
        length = len(_x)
        # - if encoded as a list instead, serialize as bytes instead of string
        if type(_x) in [list, tuple]:
          buff.write(struct.Struct('<I%sB'%length).pack(length, *_x))
        else:
          buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_3I().pack(_x.orthophoto.header.seq, _x.orthophoto.header.stamp.secs, _x.orthophoto.header.stamp.nsecs))
      _x = self.orthophoto.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_6d().pack(_x.orthophoto.resolution, _x.orthophoto.pos.x, _x.orthophoto.pos.y, _x.orthophoto.pos.z, _x.orthophoto.length_x, _x.orthophoto.length_y))
      length = len(self.orthophoto.layers)
      buff.write(_struct_I.pack(length))
      for val1 in self.orthophoto.layers:
        length = len(val1)
        if python3 or type(val1) == unicode:
          val1 = val1.encode('utf-8')
          length = len(val1)
        buff.write(struct.Struct('<I%ss'%length).pack(length, val1))
      length = len(self.orthophoto.data)
      buff.write(_struct_I.pack(length))
      for val1 in self.orthophoto.data:
        _v3 = val1.header
        _x = _v3.seq
        buff.write(_get_struct_I().pack(_x))
        _v4 = _v3.stamp
        _x = _v4
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = _v3.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = val1
        buff.write(_get_struct_2I().pack(_x.height, _x.width))
        _x = val1.encoding
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = val1
        buff.write(_get_struct_BI().pack(_x.is_bigendian, _x.step))
        _x = val1.data
        length = len(_x)
        # - if encoded as a list instead, serialize as bytes instead of string
        if type(_x) in [list, tuple]:
          buff.write(struct.Struct('<I%sB'%length).pack(length, *_x))
        else:
          buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_f14d().pack(_x.heading.data, _x.visual_pose.position.x, _x.visual_pose.position.y, _x.visual_pose.position.z, _x.visual_pose.orientation.x, _x.visual_pose.orientation.y, _x.visual_pose.orientation.z, _x.visual_pose.orientation.w, _x.georeference.transform.translation.x, _x.georeference.transform.translation.y, _x.georeference.transform.translation.z, _x.georeference.transform.rotation.x, _x.georeference.transform.rotation.y, _x.georeference.transform.rotation.z, _x.georeference.transform.rotation.w))
      length = len(self.georeference.scale)
      buff.write(_struct_I.pack(length))
      for val1 in self.georeference.scale:
        _x = val1.data
        buff.write(_get_struct_d().pack(_x))
      _x = self
      buff.write(_get_struct_5B().pack(_x.do_reset.data, _x.has_accurate_pose.data, _x.is_keyframe.data, _x.is_georeferenced.data, _x.is_surface_elevated.data))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.camera_id is None:
        self.camera_id = std_msgs.msg.String()
      if self.stage_id is None:
        self.stage_id = std_msgs.msg.UInt32()
      if self.timestamp is None:
        self.timestamp = std_msgs.msg.UInt64()
      if self.imagedata is None:
        self.imagedata = sensor_msgs.msg.CompressedImage()
      if self.camera_model is None:
        self.camera_model = realm_msgs.msg.Pinhole()
      if self.orientation is None:
        self.orientation = geometry_msgs.msg.Quaternion()
      if self.gpsdata is None:
        self.gpsdata = sensor_msgs.msg.NavSatFix()
      if self.sparse_cloud is None:
        self.sparse_cloud = realm_msgs.msg.PointCloud()
      if self.depthmap is None:
        self.depthmap = realm_msgs.msg.Depthmap()
      if self.surface_model is None:
        self.surface_model = realm_msgs.msg.CvGridMap()
      if self.orthophoto is None:
        self.orthophoto = realm_msgs.msg.CvGridMap()
      if self.heading is None:
        self.heading = std_msgs.msg.Float32()
      if self.visual_pose is None:
        self.visual_pose = geometry_msgs.msg.Pose()
      if self.georeference is None:
        self.georeference = realm_msgs.msg.Georeference()
      if self.do_reset is None:
        self.do_reset = std_msgs.msg.Bool()
      if self.has_accurate_pose is None:
        self.has_accurate_pose = std_msgs.msg.Bool()
      if self.is_keyframe is None:
        self.is_keyframe = std_msgs.msg.Bool()
      if self.is_georeferenced is None:
        self.is_georeferenced = std_msgs.msg.Bool()
      if self.is_surface_elevated is None:
        self.is_surface_elevated = std_msgs.msg.Bool()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.camera_id.data = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.camera_id.data = str[start:end]
      _x = self
      start = end
      end += 24
      (_x.stage_id.data, _x.timestamp.data, _x.imagedata.header.seq, _x.imagedata.header.stamp.secs, _x.imagedata.header.stamp.nsecs,) = _get_struct_IQ3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.imagedata.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.imagedata.header.frame_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.imagedata.format = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.imagedata.format = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.imagedata.data = str[start:end]
      _x = self
      start = end
      end += 124
      (_x.camera_model.width.data, _x.camera_model.height.data, _x.camera_model.cx.data, _x.camera_model.cy.data, _x.camera_model.fx.data, _x.camera_model.fy.data, _x.camera_model.k1.data, _x.camera_model.k2.data, _x.camera_model.p1.data, _x.camera_model.p2.data, _x.camera_model.k3.data, _x.orientation.x, _x.orientation.y, _x.orientation.z, _x.orientation.w, _x.gpsdata.header.seq, _x.gpsdata.header.stamp.secs, _x.gpsdata.header.stamp.nsecs,) = _get_struct_2I13d3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.gpsdata.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.gpsdata.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 27
      (_x.gpsdata.status.status, _x.gpsdata.status.service, _x.gpsdata.latitude, _x.gpsdata.longitude, _x.gpsdata.altitude,) = _get_struct_bH3d().unpack(str[start:end])
      start = end
      end += 72
      self.gpsdata.position_covariance = _get_struct_9d().unpack(str[start:end])
      _x = self
      start = end
      end += 13
      (_x.gpsdata.position_covariance_type, _x.sparse_cloud.header.seq, _x.sparse_cloud.header.stamp.secs, _x.sparse_cloud.header.stamp.nsecs,) = _get_struct_B3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.sparse_cloud.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.sparse_cloud.header.frame_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sI'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.sparse_cloud.point_ids = s.unpack(str[start:end])
      _x = self
      start = end
      end += 12
      (_x.sparse_cloud.points.header.seq, _x.sparse_cloud.points.header.stamp.secs, _x.sparse_cloud.points.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.sparse_cloud.points.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.sparse_cloud.points.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 8
      (_x.sparse_cloud.points.height, _x.sparse_cloud.points.width,) = _get_struct_2I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.sparse_cloud.points.encoding = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.sparse_cloud.points.encoding = str[start:end]
      _x = self
      start = end
      end += 5
      (_x.sparse_cloud.points.is_bigendian, _x.sparse_cloud.points.step,) = _get_struct_BI().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.sparse_cloud.points.data = str[start:end]
      _x = self
      start = end
      end += 12
      (_x.depthmap.header.seq, _x.depthmap.header.stamp.secs, _x.depthmap.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.depthmap.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.depthmap.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 148
      (_x.depthmap.camera_model.width.data, _x.depthmap.camera_model.height.data, _x.depthmap.camera_model.cx.data, _x.depthmap.camera_model.cy.data, _x.depthmap.camera_model.fx.data, _x.depthmap.camera_model.fy.data, _x.depthmap.camera_model.k1.data, _x.depthmap.camera_model.k2.data, _x.depthmap.camera_model.p1.data, _x.depthmap.camera_model.p2.data, _x.depthmap.camera_model.k3.data, _x.depthmap.pose.position.x, _x.depthmap.pose.position.y, _x.depthmap.pose.position.z, _x.depthmap.pose.orientation.x, _x.depthmap.pose.orientation.y, _x.depthmap.pose.orientation.z, _x.depthmap.pose.orientation.w, _x.depthmap.data.header.seq, _x.depthmap.data.header.stamp.secs, _x.depthmap.data.header.stamp.nsecs,) = _get_struct_2I16d3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.depthmap.data.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.depthmap.data.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 8
      (_x.depthmap.data.height, _x.depthmap.data.width,) = _get_struct_2I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.depthmap.data.encoding = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.depthmap.data.encoding = str[start:end]
      _x = self
      start = end
      end += 5
      (_x.depthmap.data.is_bigendian, _x.depthmap.data.step,) = _get_struct_BI().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.depthmap.data.data = str[start:end]
      _x = self
      start = end
      end += 12
      (_x.surface_model.header.seq, _x.surface_model.header.stamp.secs, _x.surface_model.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.surface_model.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.surface_model.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 48
      (_x.surface_model.resolution, _x.surface_model.pos.x, _x.surface_model.pos.y, _x.surface_model.pos.z, _x.surface_model.length_x, _x.surface_model.length_y,) = _get_struct_6d().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.surface_model.layers = []
      for i in range(0, length):
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1 = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1 = str[start:end]
        self.surface_model.layers.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.surface_model.data = []
      for i in range(0, length):
        val1 = sensor_msgs.msg.Image()
        _v5 = val1.header
        start = end
        end += 4
        (_v5.seq,) = _get_struct_I().unpack(str[start:end])
        _v6 = _v5.stamp
        _x = _v6
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v5.frame_id = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v5.frame_id = str[start:end]
        _x = val1
        start = end
        end += 8
        (_x.height, _x.width,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.encoding = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.encoding = str[start:end]
        _x = val1
        start = end
        end += 5
        (_x.is_bigendian, _x.step,) = _get_struct_BI().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        val1.data = str[start:end]
        self.surface_model.data.append(val1)
      _x = self
      start = end
      end += 12
      (_x.orthophoto.header.seq, _x.orthophoto.header.stamp.secs, _x.orthophoto.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.orthophoto.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.orthophoto.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 48
      (_x.orthophoto.resolution, _x.orthophoto.pos.x, _x.orthophoto.pos.y, _x.orthophoto.pos.z, _x.orthophoto.length_x, _x.orthophoto.length_y,) = _get_struct_6d().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.orthophoto.layers = []
      for i in range(0, length):
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1 = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1 = str[start:end]
        self.orthophoto.layers.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.orthophoto.data = []
      for i in range(0, length):
        val1 = sensor_msgs.msg.Image()
        _v7 = val1.header
        start = end
        end += 4
        (_v7.seq,) = _get_struct_I().unpack(str[start:end])
        _v8 = _v7.stamp
        _x = _v8
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v7.frame_id = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v7.frame_id = str[start:end]
        _x = val1
        start = end
        end += 8
        (_x.height, _x.width,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.encoding = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.encoding = str[start:end]
        _x = val1
        start = end
        end += 5
        (_x.is_bigendian, _x.step,) = _get_struct_BI().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        val1.data = str[start:end]
        self.orthophoto.data.append(val1)
      _x = self
      start = end
      end += 116
      (_x.heading.data, _x.visual_pose.position.x, _x.visual_pose.position.y, _x.visual_pose.position.z, _x.visual_pose.orientation.x, _x.visual_pose.orientation.y, _x.visual_pose.orientation.z, _x.visual_pose.orientation.w, _x.georeference.transform.translation.x, _x.georeference.transform.translation.y, _x.georeference.transform.translation.z, _x.georeference.transform.rotation.x, _x.georeference.transform.rotation.y, _x.georeference.transform.rotation.z, _x.georeference.transform.rotation.w,) = _get_struct_f14d().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.georeference.scale = []
      for i in range(0, length):
        val1 = std_msgs.msg.Float64()
        start = end
        end += 8
        (val1.data,) = _get_struct_d().unpack(str[start:end])
        self.georeference.scale.append(val1)
      _x = self
      start = end
      end += 5
      (_x.do_reset.data, _x.has_accurate_pose.data, _x.is_keyframe.data, _x.is_georeferenced.data, _x.is_surface_elevated.data,) = _get_struct_5B().unpack(str[start:end])
      self.do_reset.data = bool(self.do_reset.data)
      self.has_accurate_pose.data = bool(self.has_accurate_pose.data)
      self.is_keyframe.data = bool(self.is_keyframe.data)
      self.is_georeferenced.data = bool(self.is_georeferenced.data)
      self.is_surface_elevated.data = bool(self.is_surface_elevated.data)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.camera_id.data
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_IQ3I().pack(_x.stage_id.data, _x.timestamp.data, _x.imagedata.header.seq, _x.imagedata.header.stamp.secs, _x.imagedata.header.stamp.nsecs))
      _x = self.imagedata.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.imagedata.format
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.imagedata.data
      length = len(_x)
      # - if encoded as a list instead, serialize as bytes instead of string
      if type(_x) in [list, tuple]:
        buff.write(struct.Struct('<I%sB'%length).pack(length, *_x))
      else:
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_2I13d3I().pack(_x.camera_model.width.data, _x.camera_model.height.data, _x.camera_model.cx.data, _x.camera_model.cy.data, _x.camera_model.fx.data, _x.camera_model.fy.data, _x.camera_model.k1.data, _x.camera_model.k2.data, _x.camera_model.p1.data, _x.camera_model.p2.data, _x.camera_model.k3.data, _x.orientation.x, _x.orientation.y, _x.orientation.z, _x.orientation.w, _x.gpsdata.header.seq, _x.gpsdata.header.stamp.secs, _x.gpsdata.header.stamp.nsecs))
      _x = self.gpsdata.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_bH3d().pack(_x.gpsdata.status.status, _x.gpsdata.status.service, _x.gpsdata.latitude, _x.gpsdata.longitude, _x.gpsdata.altitude))
      buff.write(self.gpsdata.position_covariance.tostring())
      _x = self
      buff.write(_get_struct_B3I().pack(_x.gpsdata.position_covariance_type, _x.sparse_cloud.header.seq, _x.sparse_cloud.header.stamp.secs, _x.sparse_cloud.header.stamp.nsecs))
      _x = self.sparse_cloud.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      length = len(self.sparse_cloud.point_ids)
      buff.write(_struct_I.pack(length))
      pattern = '<%sI'%length
      buff.write(self.sparse_cloud.point_ids.tostring())
      _x = self
      buff.write(_get_struct_3I().pack(_x.sparse_cloud.points.header.seq, _x.sparse_cloud.points.header.stamp.secs, _x.sparse_cloud.points.header.stamp.nsecs))
      _x = self.sparse_cloud.points.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_2I().pack(_x.sparse_cloud.points.height, _x.sparse_cloud.points.width))
      _x = self.sparse_cloud.points.encoding
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_BI().pack(_x.sparse_cloud.points.is_bigendian, _x.sparse_cloud.points.step))
      _x = self.sparse_cloud.points.data
      length = len(_x)
      # - if encoded as a list instead, serialize as bytes instead of string
      if type(_x) in [list, tuple]:
        buff.write(struct.Struct('<I%sB'%length).pack(length, *_x))
      else:
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_3I().pack(_x.depthmap.header.seq, _x.depthmap.header.stamp.secs, _x.depthmap.header.stamp.nsecs))
      _x = self.depthmap.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_2I16d3I().pack(_x.depthmap.camera_model.width.data, _x.depthmap.camera_model.height.data, _x.depthmap.camera_model.cx.data, _x.depthmap.camera_model.cy.data, _x.depthmap.camera_model.fx.data, _x.depthmap.camera_model.fy.data, _x.depthmap.camera_model.k1.data, _x.depthmap.camera_model.k2.data, _x.depthmap.camera_model.p1.data, _x.depthmap.camera_model.p2.data, _x.depthmap.camera_model.k3.data, _x.depthmap.pose.position.x, _x.depthmap.pose.position.y, _x.depthmap.pose.position.z, _x.depthmap.pose.orientation.x, _x.depthmap.pose.orientation.y, _x.depthmap.pose.orientation.z, _x.depthmap.pose.orientation.w, _x.depthmap.data.header.seq, _x.depthmap.data.header.stamp.secs, _x.depthmap.data.header.stamp.nsecs))
      _x = self.depthmap.data.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_2I().pack(_x.depthmap.data.height, _x.depthmap.data.width))
      _x = self.depthmap.data.encoding
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_BI().pack(_x.depthmap.data.is_bigendian, _x.depthmap.data.step))
      _x = self.depthmap.data.data
      length = len(_x)
      # - if encoded as a list instead, serialize as bytes instead of string
      if type(_x) in [list, tuple]:
        buff.write(struct.Struct('<I%sB'%length).pack(length, *_x))
      else:
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_3I().pack(_x.surface_model.header.seq, _x.surface_model.header.stamp.secs, _x.surface_model.header.stamp.nsecs))
      _x = self.surface_model.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_6d().pack(_x.surface_model.resolution, _x.surface_model.pos.x, _x.surface_model.pos.y, _x.surface_model.pos.z, _x.surface_model.length_x, _x.surface_model.length_y))
      length = len(self.surface_model.layers)
      buff.write(_struct_I.pack(length))
      for val1 in self.surface_model.layers:
        length = len(val1)
        if python3 or type(val1) == unicode:
          val1 = val1.encode('utf-8')
          length = len(val1)
        buff.write(struct.Struct('<I%ss'%length).pack(length, val1))
      length = len(self.surface_model.data)
      buff.write(_struct_I.pack(length))
      for val1 in self.surface_model.data:
        _v9 = val1.header
        _x = _v9.seq
        buff.write(_get_struct_I().pack(_x))
        _v10 = _v9.stamp
        _x = _v10
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = _v9.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = val1
        buff.write(_get_struct_2I().pack(_x.height, _x.width))
        _x = val1.encoding
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = val1
        buff.write(_get_struct_BI().pack(_x.is_bigendian, _x.step))
        _x = val1.data
        length = len(_x)
        # - if encoded as a list instead, serialize as bytes instead of string
        if type(_x) in [list, tuple]:
          buff.write(struct.Struct('<I%sB'%length).pack(length, *_x))
        else:
          buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_3I().pack(_x.orthophoto.header.seq, _x.orthophoto.header.stamp.secs, _x.orthophoto.header.stamp.nsecs))
      _x = self.orthophoto.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_6d().pack(_x.orthophoto.resolution, _x.orthophoto.pos.x, _x.orthophoto.pos.y, _x.orthophoto.pos.z, _x.orthophoto.length_x, _x.orthophoto.length_y))
      length = len(self.orthophoto.layers)
      buff.write(_struct_I.pack(length))
      for val1 in self.orthophoto.layers:
        length = len(val1)
        if python3 or type(val1) == unicode:
          val1 = val1.encode('utf-8')
          length = len(val1)
        buff.write(struct.Struct('<I%ss'%length).pack(length, val1))
      length = len(self.orthophoto.data)
      buff.write(_struct_I.pack(length))
      for val1 in self.orthophoto.data:
        _v11 = val1.header
        _x = _v11.seq
        buff.write(_get_struct_I().pack(_x))
        _v12 = _v11.stamp
        _x = _v12
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = _v11.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = val1
        buff.write(_get_struct_2I().pack(_x.height, _x.width))
        _x = val1.encoding
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = val1
        buff.write(_get_struct_BI().pack(_x.is_bigendian, _x.step))
        _x = val1.data
        length = len(_x)
        # - if encoded as a list instead, serialize as bytes instead of string
        if type(_x) in [list, tuple]:
          buff.write(struct.Struct('<I%sB'%length).pack(length, *_x))
        else:
          buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_f14d().pack(_x.heading.data, _x.visual_pose.position.x, _x.visual_pose.position.y, _x.visual_pose.position.z, _x.visual_pose.orientation.x, _x.visual_pose.orientation.y, _x.visual_pose.orientation.z, _x.visual_pose.orientation.w, _x.georeference.transform.translation.x, _x.georeference.transform.translation.y, _x.georeference.transform.translation.z, _x.georeference.transform.rotation.x, _x.georeference.transform.rotation.y, _x.georeference.transform.rotation.z, _x.georeference.transform.rotation.w))
      length = len(self.georeference.scale)
      buff.write(_struct_I.pack(length))
      for val1 in self.georeference.scale:
        _x = val1.data
        buff.write(_get_struct_d().pack(_x))
      _x = self
      buff.write(_get_struct_5B().pack(_x.do_reset.data, _x.has_accurate_pose.data, _x.is_keyframe.data, _x.is_georeferenced.data, _x.is_surface_elevated.data))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.camera_id is None:
        self.camera_id = std_msgs.msg.String()
      if self.stage_id is None:
        self.stage_id = std_msgs.msg.UInt32()
      if self.timestamp is None:
        self.timestamp = std_msgs.msg.UInt64()
      if self.imagedata is None:
        self.imagedata = sensor_msgs.msg.CompressedImage()
      if self.camera_model is None:
        self.camera_model = realm_msgs.msg.Pinhole()
      if self.orientation is None:
        self.orientation = geometry_msgs.msg.Quaternion()
      if self.gpsdata is None:
        self.gpsdata = sensor_msgs.msg.NavSatFix()
      if self.sparse_cloud is None:
        self.sparse_cloud = realm_msgs.msg.PointCloud()
      if self.depthmap is None:
        self.depthmap = realm_msgs.msg.Depthmap()
      if self.surface_model is None:
        self.surface_model = realm_msgs.msg.CvGridMap()
      if self.orthophoto is None:
        self.orthophoto = realm_msgs.msg.CvGridMap()
      if self.heading is None:
        self.heading = std_msgs.msg.Float32()
      if self.visual_pose is None:
        self.visual_pose = geometry_msgs.msg.Pose()
      if self.georeference is None:
        self.georeference = realm_msgs.msg.Georeference()
      if self.do_reset is None:
        self.do_reset = std_msgs.msg.Bool()
      if self.has_accurate_pose is None:
        self.has_accurate_pose = std_msgs.msg.Bool()
      if self.is_keyframe is None:
        self.is_keyframe = std_msgs.msg.Bool()
      if self.is_georeferenced is None:
        self.is_georeferenced = std_msgs.msg.Bool()
      if self.is_surface_elevated is None:
        self.is_surface_elevated = std_msgs.msg.Bool()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.camera_id.data = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.camera_id.data = str[start:end]
      _x = self
      start = end
      end += 24
      (_x.stage_id.data, _x.timestamp.data, _x.imagedata.header.seq, _x.imagedata.header.stamp.secs, _x.imagedata.header.stamp.nsecs,) = _get_struct_IQ3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.imagedata.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.imagedata.header.frame_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.imagedata.format = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.imagedata.format = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.imagedata.data = str[start:end]
      _x = self
      start = end
      end += 124
      (_x.camera_model.width.data, _x.camera_model.height.data, _x.camera_model.cx.data, _x.camera_model.cy.data, _x.camera_model.fx.data, _x.camera_model.fy.data, _x.camera_model.k1.data, _x.camera_model.k2.data, _x.camera_model.p1.data, _x.camera_model.p2.data, _x.camera_model.k3.data, _x.orientation.x, _x.orientation.y, _x.orientation.z, _x.orientation.w, _x.gpsdata.header.seq, _x.gpsdata.header.stamp.secs, _x.gpsdata.header.stamp.nsecs,) = _get_struct_2I13d3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.gpsdata.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.gpsdata.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 27
      (_x.gpsdata.status.status, _x.gpsdata.status.service, _x.gpsdata.latitude, _x.gpsdata.longitude, _x.gpsdata.altitude,) = _get_struct_bH3d().unpack(str[start:end])
      start = end
      end += 72
      self.gpsdata.position_covariance = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=9)
      _x = self
      start = end
      end += 13
      (_x.gpsdata.position_covariance_type, _x.sparse_cloud.header.seq, _x.sparse_cloud.header.stamp.secs, _x.sparse_cloud.header.stamp.nsecs,) = _get_struct_B3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.sparse_cloud.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.sparse_cloud.header.frame_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sI'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.sparse_cloud.point_ids = numpy.frombuffer(str[start:end], dtype=numpy.uint32, count=length)
      _x = self
      start = end
      end += 12
      (_x.sparse_cloud.points.header.seq, _x.sparse_cloud.points.header.stamp.secs, _x.sparse_cloud.points.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.sparse_cloud.points.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.sparse_cloud.points.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 8
      (_x.sparse_cloud.points.height, _x.sparse_cloud.points.width,) = _get_struct_2I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.sparse_cloud.points.encoding = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.sparse_cloud.points.encoding = str[start:end]
      _x = self
      start = end
      end += 5
      (_x.sparse_cloud.points.is_bigendian, _x.sparse_cloud.points.step,) = _get_struct_BI().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.sparse_cloud.points.data = str[start:end]
      _x = self
      start = end
      end += 12
      (_x.depthmap.header.seq, _x.depthmap.header.stamp.secs, _x.depthmap.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.depthmap.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.depthmap.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 148
      (_x.depthmap.camera_model.width.data, _x.depthmap.camera_model.height.data, _x.depthmap.camera_model.cx.data, _x.depthmap.camera_model.cy.data, _x.depthmap.camera_model.fx.data, _x.depthmap.camera_model.fy.data, _x.depthmap.camera_model.k1.data, _x.depthmap.camera_model.k2.data, _x.depthmap.camera_model.p1.data, _x.depthmap.camera_model.p2.data, _x.depthmap.camera_model.k3.data, _x.depthmap.pose.position.x, _x.depthmap.pose.position.y, _x.depthmap.pose.position.z, _x.depthmap.pose.orientation.x, _x.depthmap.pose.orientation.y, _x.depthmap.pose.orientation.z, _x.depthmap.pose.orientation.w, _x.depthmap.data.header.seq, _x.depthmap.data.header.stamp.secs, _x.depthmap.data.header.stamp.nsecs,) = _get_struct_2I16d3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.depthmap.data.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.depthmap.data.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 8
      (_x.depthmap.data.height, _x.depthmap.data.width,) = _get_struct_2I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.depthmap.data.encoding = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.depthmap.data.encoding = str[start:end]
      _x = self
      start = end
      end += 5
      (_x.depthmap.data.is_bigendian, _x.depthmap.data.step,) = _get_struct_BI().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.depthmap.data.data = str[start:end]
      _x = self
      start = end
      end += 12
      (_x.surface_model.header.seq, _x.surface_model.header.stamp.secs, _x.surface_model.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.surface_model.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.surface_model.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 48
      (_x.surface_model.resolution, _x.surface_model.pos.x, _x.surface_model.pos.y, _x.surface_model.pos.z, _x.surface_model.length_x, _x.surface_model.length_y,) = _get_struct_6d().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.surface_model.layers = []
      for i in range(0, length):
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1 = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1 = str[start:end]
        self.surface_model.layers.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.surface_model.data = []
      for i in range(0, length):
        val1 = sensor_msgs.msg.Image()
        _v13 = val1.header
        start = end
        end += 4
        (_v13.seq,) = _get_struct_I().unpack(str[start:end])
        _v14 = _v13.stamp
        _x = _v14
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v13.frame_id = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v13.frame_id = str[start:end]
        _x = val1
        start = end
        end += 8
        (_x.height, _x.width,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.encoding = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.encoding = str[start:end]
        _x = val1
        start = end
        end += 5
        (_x.is_bigendian, _x.step,) = _get_struct_BI().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        val1.data = str[start:end]
        self.surface_model.data.append(val1)
      _x = self
      start = end
      end += 12
      (_x.orthophoto.header.seq, _x.orthophoto.header.stamp.secs, _x.orthophoto.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.orthophoto.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.orthophoto.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 48
      (_x.orthophoto.resolution, _x.orthophoto.pos.x, _x.orthophoto.pos.y, _x.orthophoto.pos.z, _x.orthophoto.length_x, _x.orthophoto.length_y,) = _get_struct_6d().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.orthophoto.layers = []
      for i in range(0, length):
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1 = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1 = str[start:end]
        self.orthophoto.layers.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.orthophoto.data = []
      for i in range(0, length):
        val1 = sensor_msgs.msg.Image()
        _v15 = val1.header
        start = end
        end += 4
        (_v15.seq,) = _get_struct_I().unpack(str[start:end])
        _v16 = _v15.stamp
        _x = _v16
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v15.frame_id = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v15.frame_id = str[start:end]
        _x = val1
        start = end
        end += 8
        (_x.height, _x.width,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.encoding = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.encoding = str[start:end]
        _x = val1
        start = end
        end += 5
        (_x.is_bigendian, _x.step,) = _get_struct_BI().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        val1.data = str[start:end]
        self.orthophoto.data.append(val1)
      _x = self
      start = end
      end += 116
      (_x.heading.data, _x.visual_pose.position.x, _x.visual_pose.position.y, _x.visual_pose.position.z, _x.visual_pose.orientation.x, _x.visual_pose.orientation.y, _x.visual_pose.orientation.z, _x.visual_pose.orientation.w, _x.georeference.transform.translation.x, _x.georeference.transform.translation.y, _x.georeference.transform.translation.z, _x.georeference.transform.rotation.x, _x.georeference.transform.rotation.y, _x.georeference.transform.rotation.z, _x.georeference.transform.rotation.w,) = _get_struct_f14d().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.georeference.scale = []
      for i in range(0, length):
        val1 = std_msgs.msg.Float64()
        start = end
        end += 8
        (val1.data,) = _get_struct_d().unpack(str[start:end])
        self.georeference.scale.append(val1)
      _x = self
      start = end
      end += 5
      (_x.do_reset.data, _x.has_accurate_pose.data, _x.is_keyframe.data, _x.is_georeferenced.data, _x.is_surface_elevated.data,) = _get_struct_5B().unpack(str[start:end])
      self.do_reset.data = bool(self.do_reset.data)
      self.has_accurate_pose.data = bool(self.has_accurate_pose.data)
      self.is_keyframe.data = bool(self.is_keyframe.data)
      self.is_georeferenced.data = bool(self.is_georeferenced.data)
      self.is_surface_elevated.data = bool(self.is_surface_elevated.data)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2I = None
def _get_struct_2I():
    global _struct_2I
    if _struct_2I is None:
        _struct_2I = struct.Struct("<2I")
    return _struct_2I
_struct_2I13d3I = None
def _get_struct_2I13d3I():
    global _struct_2I13d3I
    if _struct_2I13d3I is None:
        _struct_2I13d3I = struct.Struct("<2I13d3I")
    return _struct_2I13d3I
_struct_2I16d3I = None
def _get_struct_2I16d3I():
    global _struct_2I16d3I
    if _struct_2I16d3I is None:
        _struct_2I16d3I = struct.Struct("<2I16d3I")
    return _struct_2I16d3I
_struct_3I = None
def _get_struct_3I():
    global _struct_3I
    if _struct_3I is None:
        _struct_3I = struct.Struct("<3I")
    return _struct_3I
_struct_5B = None
def _get_struct_5B():
    global _struct_5B
    if _struct_5B is None:
        _struct_5B = struct.Struct("<5B")
    return _struct_5B
_struct_6d = None
def _get_struct_6d():
    global _struct_6d
    if _struct_6d is None:
        _struct_6d = struct.Struct("<6d")
    return _struct_6d
_struct_9d = None
def _get_struct_9d():
    global _struct_9d
    if _struct_9d is None:
        _struct_9d = struct.Struct("<9d")
    return _struct_9d
_struct_B3I = None
def _get_struct_B3I():
    global _struct_B3I
    if _struct_B3I is None:
        _struct_B3I = struct.Struct("<B3I")
    return _struct_B3I
_struct_BI = None
def _get_struct_BI():
    global _struct_BI
    if _struct_BI is None:
        _struct_BI = struct.Struct("<BI")
    return _struct_BI
_struct_IQ3I = None
def _get_struct_IQ3I():
    global _struct_IQ3I
    if _struct_IQ3I is None:
        _struct_IQ3I = struct.Struct("<IQ3I")
    return _struct_IQ3I
_struct_bH3d = None
def _get_struct_bH3d():
    global _struct_bH3d
    if _struct_bH3d is None:
        _struct_bH3d = struct.Struct("<bH3d")
    return _struct_bH3d
_struct_d = None
def _get_struct_d():
    global _struct_d
    if _struct_d is None:
        _struct_d = struct.Struct("<d")
    return _struct_d
_struct_f14d = None
def _get_struct_f14d():
    global _struct_f14d
    if _struct_f14d is None:
        _struct_f14d = struct.Struct("<f14d")
    return _struct_f14d
