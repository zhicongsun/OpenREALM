// Generated by gencpp from file realm_msgs/Georeference.msg
// DO NOT EDIT!


#ifndef REALM_MSGS_MESSAGE_GEOREFERENCE_H
#define REALM_MSGS_MESSAGE_GEOREFERENCE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <geometry_msgs/Transform.h>
#include <std_msgs/Float64.h>

namespace realm_msgs
{
template <class ContainerAllocator>
struct Georeference_
{
  typedef Georeference_<ContainerAllocator> Type;

  Georeference_()
    : transform()
    , scale()  {
    }
  Georeference_(const ContainerAllocator& _alloc)
    : transform(_alloc)
    , scale(_alloc)  {
  (void)_alloc;
    }



   typedef  ::geometry_msgs::Transform_<ContainerAllocator>  _transform_type;
  _transform_type transform;

   typedef std::vector< ::std_msgs::Float64_<ContainerAllocator> , typename std::allocator_traits<ContainerAllocator>::template rebind_alloc< ::std_msgs::Float64_<ContainerAllocator> >> _scale_type;
  _scale_type scale;





  typedef boost::shared_ptr< ::realm_msgs::Georeference_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::realm_msgs::Georeference_<ContainerAllocator> const> ConstPtr;

}; // struct Georeference_

typedef ::realm_msgs::Georeference_<std::allocator<void> > Georeference;

typedef boost::shared_ptr< ::realm_msgs::Georeference > GeoreferencePtr;
typedef boost::shared_ptr< ::realm_msgs::Georeference const> GeoreferenceConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::realm_msgs::Georeference_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::realm_msgs::Georeference_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::realm_msgs::Georeference_<ContainerAllocator1> & lhs, const ::realm_msgs::Georeference_<ContainerAllocator2> & rhs)
{
  return lhs.transform == rhs.transform &&
    lhs.scale == rhs.scale;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::realm_msgs::Georeference_<ContainerAllocator1> & lhs, const ::realm_msgs::Georeference_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace realm_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::realm_msgs::Georeference_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::realm_msgs::Georeference_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::realm_msgs::Georeference_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::realm_msgs::Georeference_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::realm_msgs::Georeference_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::realm_msgs::Georeference_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::realm_msgs::Georeference_<ContainerAllocator> >
{
  static const char* value()
  {
    return "916e9c01fe447c6361e802269207d6a2";
  }

  static const char* value(const ::realm_msgs::Georeference_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x916e9c01fe447c63ULL;
  static const uint64_t static_value2 = 0x61e802269207d6a2ULL;
};

template<class ContainerAllocator>
struct DataType< ::realm_msgs::Georeference_<ContainerAllocator> >
{
  static const char* value()
  {
    return "realm_msgs/Georeference";
  }

  static const char* value(const ::realm_msgs::Georeference_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::realm_msgs::Georeference_<ContainerAllocator> >
{
  static const char* value()
  {
    return "#####################################################\n"
"# A message containing georeference informations    #\n"
"#####################################################\n"
"\n"
"# Following message is basically a similarity transformation\n"
"\n"
"geometry_msgs/Transform transform\n"
"std_msgs/Float64[] scale\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Transform\n"
"# This represents the transform between two coordinate frames in free space.\n"
"\n"
"Vector3 translation\n"
"Quaternion rotation\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Vector3\n"
"# This represents a vector in free space. \n"
"# It is only meant to represent a direction. Therefore, it does not\n"
"# make sense to apply a translation to it (e.g., when applying a \n"
"# generic rigid transformation to a Vector3, tf2 will only apply the\n"
"# rotation). If you want your data to be translatable too, use the\n"
"# geometry_msgs/Point message instead.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"================================================================================\n"
"MSG: geometry_msgs/Quaternion\n"
"# This represents an orientation in free space in quaternion form.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"float64 w\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Float64\n"
"float64 data\n"
;
  }

  static const char* value(const ::realm_msgs::Georeference_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::realm_msgs::Georeference_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.transform);
      stream.next(m.scale);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Georeference_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::realm_msgs::Georeference_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::realm_msgs::Georeference_<ContainerAllocator>& v)
  {
    s << indent << "transform: ";
    s << std::endl;
    Printer< ::geometry_msgs::Transform_<ContainerAllocator> >::stream(s, indent + "  ", v.transform);
    s << indent << "scale[]" << std::endl;
    for (size_t i = 0; i < v.scale.size(); ++i)
    {
      s << indent << "  scale[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::std_msgs::Float64_<ContainerAllocator> >::stream(s, indent + "    ", v.scale[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // REALM_MSGS_MESSAGE_GEOREFERENCE_H
