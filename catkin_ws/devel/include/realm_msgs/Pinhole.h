// Generated by gencpp from file realm_msgs/Pinhole.msg
// DO NOT EDIT!


#ifndef REALM_MSGS_MESSAGE_PINHOLE_H
#define REALM_MSGS_MESSAGE_PINHOLE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/UInt32.h>
#include <std_msgs/UInt32.h>
#include <std_msgs/Float64.h>
#include <std_msgs/Float64.h>
#include <std_msgs/Float64.h>
#include <std_msgs/Float64.h>
#include <std_msgs/Float64.h>
#include <std_msgs/Float64.h>
#include <std_msgs/Float64.h>
#include <std_msgs/Float64.h>
#include <std_msgs/Float64.h>

namespace realm_msgs
{
template <class ContainerAllocator>
struct Pinhole_
{
  typedef Pinhole_<ContainerAllocator> Type;

  Pinhole_()
    : width()
    , height()
    , cx()
    , cy()
    , fx()
    , fy()
    , k1()
    , k2()
    , p1()
    , p2()
    , k3()  {
    }
  Pinhole_(const ContainerAllocator& _alloc)
    : width(_alloc)
    , height(_alloc)
    , cx(_alloc)
    , cy(_alloc)
    , fx(_alloc)
    , fy(_alloc)
    , k1(_alloc)
    , k2(_alloc)
    , p1(_alloc)
    , p2(_alloc)
    , k3(_alloc)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::UInt32_<ContainerAllocator>  _width_type;
  _width_type width;

   typedef  ::std_msgs::UInt32_<ContainerAllocator>  _height_type;
  _height_type height;

   typedef  ::std_msgs::Float64_<ContainerAllocator>  _cx_type;
  _cx_type cx;

   typedef  ::std_msgs::Float64_<ContainerAllocator>  _cy_type;
  _cy_type cy;

   typedef  ::std_msgs::Float64_<ContainerAllocator>  _fx_type;
  _fx_type fx;

   typedef  ::std_msgs::Float64_<ContainerAllocator>  _fy_type;
  _fy_type fy;

   typedef  ::std_msgs::Float64_<ContainerAllocator>  _k1_type;
  _k1_type k1;

   typedef  ::std_msgs::Float64_<ContainerAllocator>  _k2_type;
  _k2_type k2;

   typedef  ::std_msgs::Float64_<ContainerAllocator>  _p1_type;
  _p1_type p1;

   typedef  ::std_msgs::Float64_<ContainerAllocator>  _p2_type;
  _p2_type p2;

   typedef  ::std_msgs::Float64_<ContainerAllocator>  _k3_type;
  _k3_type k3;





  typedef boost::shared_ptr< ::realm_msgs::Pinhole_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::realm_msgs::Pinhole_<ContainerAllocator> const> ConstPtr;

}; // struct Pinhole_

typedef ::realm_msgs::Pinhole_<std::allocator<void> > Pinhole;

typedef boost::shared_ptr< ::realm_msgs::Pinhole > PinholePtr;
typedef boost::shared_ptr< ::realm_msgs::Pinhole const> PinholeConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::realm_msgs::Pinhole_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::realm_msgs::Pinhole_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::realm_msgs::Pinhole_<ContainerAllocator1> & lhs, const ::realm_msgs::Pinhole_<ContainerAllocator2> & rhs)
{
  return lhs.width == rhs.width &&
    lhs.height == rhs.height &&
    lhs.cx == rhs.cx &&
    lhs.cy == rhs.cy &&
    lhs.fx == rhs.fx &&
    lhs.fy == rhs.fy &&
    lhs.k1 == rhs.k1 &&
    lhs.k2 == rhs.k2 &&
    lhs.p1 == rhs.p1 &&
    lhs.p2 == rhs.p2 &&
    lhs.k3 == rhs.k3;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::realm_msgs::Pinhole_<ContainerAllocator1> & lhs, const ::realm_msgs::Pinhole_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace realm_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::realm_msgs::Pinhole_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::realm_msgs::Pinhole_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::realm_msgs::Pinhole_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::realm_msgs::Pinhole_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::realm_msgs::Pinhole_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::realm_msgs::Pinhole_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::realm_msgs::Pinhole_<ContainerAllocator> >
{
  static const char* value()
  {
    return "89c97ad67d741eb4b47e5809398cd3a4";
  }

  static const char* value(const ::realm_msgs::Pinhole_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x89c97ad67d741eb4ULL;
  static const uint64_t static_value2 = 0xb47e5809398cd3a4ULL;
};

template<class ContainerAllocator>
struct DataType< ::realm_msgs::Pinhole_<ContainerAllocator> >
{
  static const char* value()
  {
    return "realm_msgs/Pinhole";
  }

  static const char* value(const ::realm_msgs::Pinhole_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::realm_msgs::Pinhole_<ContainerAllocator> >
{
  static const char* value()
  {
    return "#####################################################\n"
"# A message containing general pinhole camera model #\n"
"#####################################################\n"
"\n"
"# Image dimensions\n"
"std_msgs/UInt32 width\n"
"std_msgs/UInt32 height\n"
"\n"
"# Principal point\n"
"std_msgs/Float64 cx\n"
"std_msgs/Float64 cy\n"
"\n"
"# Focal length\n"
"std_msgs/Float64 fx\n"
"std_msgs/Float64 fy\n"
"\n"
"# Radial distortion parameters\n"
"std_msgs/Float64 k1\n"
"std_msgs/Float64 k2\n"
"std_msgs/Float64 p1\n"
"std_msgs/Float64 p2\n"
"std_msgs/Float64 k3\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/UInt32\n"
"uint32 data\n"
"================================================================================\n"
"MSG: std_msgs/Float64\n"
"float64 data\n"
;
  }

  static const char* value(const ::realm_msgs::Pinhole_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::realm_msgs::Pinhole_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.width);
      stream.next(m.height);
      stream.next(m.cx);
      stream.next(m.cy);
      stream.next(m.fx);
      stream.next(m.fy);
      stream.next(m.k1);
      stream.next(m.k2);
      stream.next(m.p1);
      stream.next(m.p2);
      stream.next(m.k3);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Pinhole_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::realm_msgs::Pinhole_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::realm_msgs::Pinhole_<ContainerAllocator>& v)
  {
    s << indent << "width: ";
    s << std::endl;
    Printer< ::std_msgs::UInt32_<ContainerAllocator> >::stream(s, indent + "  ", v.width);
    s << indent << "height: ";
    s << std::endl;
    Printer< ::std_msgs::UInt32_<ContainerAllocator> >::stream(s, indent + "  ", v.height);
    s << indent << "cx: ";
    s << std::endl;
    Printer< ::std_msgs::Float64_<ContainerAllocator> >::stream(s, indent + "  ", v.cx);
    s << indent << "cy: ";
    s << std::endl;
    Printer< ::std_msgs::Float64_<ContainerAllocator> >::stream(s, indent + "  ", v.cy);
    s << indent << "fx: ";
    s << std::endl;
    Printer< ::std_msgs::Float64_<ContainerAllocator> >::stream(s, indent + "  ", v.fx);
    s << indent << "fy: ";
    s << std::endl;
    Printer< ::std_msgs::Float64_<ContainerAllocator> >::stream(s, indent + "  ", v.fy);
    s << indent << "k1: ";
    s << std::endl;
    Printer< ::std_msgs::Float64_<ContainerAllocator> >::stream(s, indent + "  ", v.k1);
    s << indent << "k2: ";
    s << std::endl;
    Printer< ::std_msgs::Float64_<ContainerAllocator> >::stream(s, indent + "  ", v.k2);
    s << indent << "p1: ";
    s << std::endl;
    Printer< ::std_msgs::Float64_<ContainerAllocator> >::stream(s, indent + "  ", v.p1);
    s << indent << "p2: ";
    s << std::endl;
    Printer< ::std_msgs::Float64_<ContainerAllocator> >::stream(s, indent + "  ", v.p2);
    s << indent << "k3: ";
    s << std::endl;
    Printer< ::std_msgs::Float64_<ContainerAllocator> >::stream(s, indent + "  ", v.k3);
  }
};

} // namespace message_operations
} // namespace ros

#endif // REALM_MSGS_MESSAGE_PINHOLE_H
