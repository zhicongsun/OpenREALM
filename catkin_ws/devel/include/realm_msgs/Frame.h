// Generated by gencpp from file realm_msgs/Frame.msg
// DO NOT EDIT!


#ifndef REALM_MSGS_MESSAGE_FRAME_H
#define REALM_MSGS_MESSAGE_FRAME_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>
#include <std_msgs/String.h>
#include <std_msgs/UInt32.h>
#include <std_msgs/UInt64.h>
#include <sensor_msgs/CompressedImage.h>
#include <realm_msgs/Pinhole.h>
#include <geometry_msgs/Quaternion.h>
#include <sensor_msgs/NavSatFix.h>
#include <realm_msgs/PointCloud.h>
#include <realm_msgs/Depthmap.h>
#include <realm_msgs/CvGridMap.h>
#include <realm_msgs/CvGridMap.h>
#include <std_msgs/Float32.h>
#include <geometry_msgs/Pose.h>
#include <realm_msgs/Georeference.h>
#include <std_msgs/Bool.h>
#include <std_msgs/Bool.h>
#include <std_msgs/Bool.h>
#include <std_msgs/Bool.h>
#include <std_msgs/Bool.h>

namespace realm_msgs
{
template <class ContainerAllocator>
struct Frame_
{
  typedef Frame_<ContainerAllocator> Type;

  Frame_()
    : header()
    , camera_id()
    , stage_id()
    , timestamp()
    , imagedata()
    , camera_model()
    , orientation()
    , gpsdata()
    , sparse_cloud()
    , depthmap()
    , surface_model()
    , orthophoto()
    , heading()
    , visual_pose()
    , georeference()
    , do_reset()
    , has_accurate_pose()
    , is_keyframe()
    , is_georeferenced()
    , is_surface_elevated()  {
    }
  Frame_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , camera_id(_alloc)
    , stage_id(_alloc)
    , timestamp(_alloc)
    , imagedata(_alloc)
    , camera_model(_alloc)
    , orientation(_alloc)
    , gpsdata(_alloc)
    , sparse_cloud(_alloc)
    , depthmap(_alloc)
    , surface_model(_alloc)
    , orthophoto(_alloc)
    , heading(_alloc)
    , visual_pose(_alloc)
    , georeference(_alloc)
    , do_reset(_alloc)
    , has_accurate_pose(_alloc)
    , is_keyframe(_alloc)
    , is_georeferenced(_alloc)
    , is_surface_elevated(_alloc)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef  ::std_msgs::String_<ContainerAllocator>  _camera_id_type;
  _camera_id_type camera_id;

   typedef  ::std_msgs::UInt32_<ContainerAllocator>  _stage_id_type;
  _stage_id_type stage_id;

   typedef  ::std_msgs::UInt64_<ContainerAllocator>  _timestamp_type;
  _timestamp_type timestamp;

   typedef  ::sensor_msgs::CompressedImage_<ContainerAllocator>  _imagedata_type;
  _imagedata_type imagedata;

   typedef  ::realm_msgs::Pinhole_<ContainerAllocator>  _camera_model_type;
  _camera_model_type camera_model;

   typedef  ::geometry_msgs::Quaternion_<ContainerAllocator>  _orientation_type;
  _orientation_type orientation;

   typedef  ::sensor_msgs::NavSatFix_<ContainerAllocator>  _gpsdata_type;
  _gpsdata_type gpsdata;

   typedef  ::realm_msgs::PointCloud_<ContainerAllocator>  _sparse_cloud_type;
  _sparse_cloud_type sparse_cloud;

   typedef  ::realm_msgs::Depthmap_<ContainerAllocator>  _depthmap_type;
  _depthmap_type depthmap;

   typedef  ::realm_msgs::CvGridMap_<ContainerAllocator>  _surface_model_type;
  _surface_model_type surface_model;

   typedef  ::realm_msgs::CvGridMap_<ContainerAllocator>  _orthophoto_type;
  _orthophoto_type orthophoto;

   typedef  ::std_msgs::Float32_<ContainerAllocator>  _heading_type;
  _heading_type heading;

   typedef  ::geometry_msgs::Pose_<ContainerAllocator>  _visual_pose_type;
  _visual_pose_type visual_pose;

   typedef  ::realm_msgs::Georeference_<ContainerAllocator>  _georeference_type;
  _georeference_type georeference;

   typedef  ::std_msgs::Bool_<ContainerAllocator>  _do_reset_type;
  _do_reset_type do_reset;

   typedef  ::std_msgs::Bool_<ContainerAllocator>  _has_accurate_pose_type;
  _has_accurate_pose_type has_accurate_pose;

   typedef  ::std_msgs::Bool_<ContainerAllocator>  _is_keyframe_type;
  _is_keyframe_type is_keyframe;

   typedef  ::std_msgs::Bool_<ContainerAllocator>  _is_georeferenced_type;
  _is_georeferenced_type is_georeferenced;

   typedef  ::std_msgs::Bool_<ContainerAllocator>  _is_surface_elevated_type;
  _is_surface_elevated_type is_surface_elevated;





  typedef boost::shared_ptr< ::realm_msgs::Frame_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::realm_msgs::Frame_<ContainerAllocator> const> ConstPtr;

}; // struct Frame_

typedef ::realm_msgs::Frame_<std::allocator<void> > Frame;

typedef boost::shared_ptr< ::realm_msgs::Frame > FramePtr;
typedef boost::shared_ptr< ::realm_msgs::Frame const> FrameConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::realm_msgs::Frame_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::realm_msgs::Frame_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::realm_msgs::Frame_<ContainerAllocator1> & lhs, const ::realm_msgs::Frame_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.camera_id == rhs.camera_id &&
    lhs.stage_id == rhs.stage_id &&
    lhs.timestamp == rhs.timestamp &&
    lhs.imagedata == rhs.imagedata &&
    lhs.camera_model == rhs.camera_model &&
    lhs.orientation == rhs.orientation &&
    lhs.gpsdata == rhs.gpsdata &&
    lhs.sparse_cloud == rhs.sparse_cloud &&
    lhs.depthmap == rhs.depthmap &&
    lhs.surface_model == rhs.surface_model &&
    lhs.orthophoto == rhs.orthophoto &&
    lhs.heading == rhs.heading &&
    lhs.visual_pose == rhs.visual_pose &&
    lhs.georeference == rhs.georeference &&
    lhs.do_reset == rhs.do_reset &&
    lhs.has_accurate_pose == rhs.has_accurate_pose &&
    lhs.is_keyframe == rhs.is_keyframe &&
    lhs.is_georeferenced == rhs.is_georeferenced &&
    lhs.is_surface_elevated == rhs.is_surface_elevated;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::realm_msgs::Frame_<ContainerAllocator1> & lhs, const ::realm_msgs::Frame_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace realm_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::realm_msgs::Frame_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::realm_msgs::Frame_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::realm_msgs::Frame_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::realm_msgs::Frame_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::realm_msgs::Frame_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::realm_msgs::Frame_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::realm_msgs::Frame_<ContainerAllocator> >
{
  static const char* value()
  {
    return "5c5634361f210a95be3b4183d672f7a7";
  }

  static const char* value(const ::realm_msgs::Frame_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x5c5634361f210a95ULL;
  static const uint64_t static_value2 = 0xbe3b4183d672f7a7ULL;
};

template<class ContainerAllocator>
struct DataType< ::realm_msgs::Frame_<ContainerAllocator> >
{
  static const char* value()
  {
    return "realm_msgs/Frame";
  }

  static const char* value(const ::realm_msgs::Frame_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::realm_msgs::Frame_<ContainerAllocator> >
{
  static const char* value()
  {
    return "#######################################################\n"
"# A message containing basic REALM frame informations #\n"
"#######################################################\n"
"\n"
"##################### Sensor data #####################\n"
"# (required) Header containing message meta data\n"
"std_msgs/Header header\n"
"\n"
"# (required) Unique name/id of the acquiring camera\n"
"std_msgs/String camera_id\n"
"\n"
"# (required) Frame id which is constant over the whole stage processing. Should only be set once\n"
"std_msgs/UInt32 stage_id\n"
"\n"
"# (required) Timestamp of the acquisition. Is not the same as ros message timestamp!\n"
"std_msgs/UInt64 timestamp\n"
"\n"
"# (required) Imagedata containing the compressed camera data\n"
"sensor_msgs/CompressedImage imagedata\n"
"\n"
"# (required) Camera_model containing pinhole parameters of capturing cam\n"
"realm_msgs/Pinhole camera_model\n"
"\n"
"# (required) Camera orientation as quaternion\n"
"geometry_msgs/Quaternion orientation\n"
"\n"
"# (required) Gnss data containing geodetic informations of the image\n"
"sensor_msgs/NavSatFix gpsdata\n"
"\n"
"# (optional) Point cloud of the observed surface\n"
"realm_msgs/PointCloud sparse_cloud\n"
"\n"
"# (optional) Depthmap of the observed scene\n"
"realm_msgs/Depthmap depthmap\n"
"\n"
"# (optional) Surface model as grid map of the frame projection\n"
"realm_msgs/CvGridMap surface_model\n"
"\n"
"# (optional) Orthophoto of the frame\n"
"realm_msgs/CvGridMap orthophoto\n"
"\n"
"# (optional) Heading in Degree, required if mapping on GNSS only\n"
"std_msgs/Float32 heading\n"
"\n"
"# (optional) Visual pose of the camera in local coordinate frame, required e.g. for georeference updates\n"
"geometry_msgs/Pose visual_pose\n"
"\n"
"# (optional) Transformation from the visual to the geographic world\n"
"realm_msgs/Georeference georeference\n"
"\n"
"######################## Flags ########################\n"
"# Reset flag: set true, if following stage should be resetted\n"
"std_msgs/Bool do_reset\n"
"\n"
"# Accurate pose flag: set true, if pose is suited for dense reconstruction\n"
"std_msgs/Bool has_accurate_pose\n"
"\n"
"# Is key frame flag: set true, if frame was marked as keyframe\n"
"std_msgs/Bool is_keyframe\n"
"\n"
"# Is georeferenced flag: set true, if frame was successfully georeferenced\n"
"std_msgs/Bool is_georeferenced\n"
"\n"
"# Flag to check if surface was computed with 2.5D elevation or not\n"
"std_msgs/Bool is_surface_elevated\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/String\n"
"string data\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/UInt32\n"
"uint32 data\n"
"================================================================================\n"
"MSG: std_msgs/UInt64\n"
"uint64 data\n"
"================================================================================\n"
"MSG: sensor_msgs/CompressedImage\n"
"# This message contains a compressed image\n"
"\n"
"Header header        # Header timestamp should be acquisition time of image\n"
"                     # Header frame_id should be optical frame of camera\n"
"                     # origin of frame should be optical center of camera\n"
"                     # +x should point to the right in the image\n"
"                     # +y should point down in the image\n"
"                     # +z should point into to plane of the image\n"
"\n"
"string format        # Specifies the format of the data\n"
"                     #   Acceptable values:\n"
"                     #     jpeg, png\n"
"uint8[] data         # Compressed image buffer\n"
"\n"
"================================================================================\n"
"MSG: realm_msgs/Pinhole\n"
"#####################################################\n"
"# A message containing general pinhole camera model #\n"
"#####################################################\n"
"\n"
"# Image dimensions\n"
"std_msgs/UInt32 width\n"
"std_msgs/UInt32 height\n"
"\n"
"# Principal point\n"
"std_msgs/Float64 cx\n"
"std_msgs/Float64 cy\n"
"\n"
"# Focal length\n"
"std_msgs/Float64 fx\n"
"std_msgs/Float64 fy\n"
"\n"
"# Radial distortion parameters\n"
"std_msgs/Float64 k1\n"
"std_msgs/Float64 k2\n"
"std_msgs/Float64 p1\n"
"std_msgs/Float64 p2\n"
"std_msgs/Float64 k3\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Float64\n"
"float64 data\n"
"================================================================================\n"
"MSG: geometry_msgs/Quaternion\n"
"# This represents an orientation in free space in quaternion form.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"float64 w\n"
"\n"
"================================================================================\n"
"MSG: sensor_msgs/NavSatFix\n"
"# Navigation Satellite fix for any Global Navigation Satellite System\n"
"#\n"
"# Specified using the WGS 84 reference ellipsoid\n"
"\n"
"# header.stamp specifies the ROS time for this measurement (the\n"
"#        corresponding satellite time may be reported using the\n"
"#        sensor_msgs/TimeReference message).\n"
"#\n"
"# header.frame_id is the frame of reference reported by the satellite\n"
"#        receiver, usually the location of the antenna.  This is a\n"
"#        Euclidean frame relative to the vehicle, not a reference\n"
"#        ellipsoid.\n"
"Header header\n"
"\n"
"# satellite fix status information\n"
"NavSatStatus status\n"
"\n"
"# Latitude [degrees]. Positive is north of equator; negative is south.\n"
"float64 latitude\n"
"\n"
"# Longitude [degrees]. Positive is east of prime meridian; negative is west.\n"
"float64 longitude\n"
"\n"
"# Altitude [m]. Positive is above the WGS 84 ellipsoid\n"
"# (quiet NaN if no altitude is available).\n"
"float64 altitude\n"
"\n"
"# Position covariance [m^2] defined relative to a tangential plane\n"
"# through the reported position. The components are East, North, and\n"
"# Up (ENU), in row-major order.\n"
"#\n"
"# Beware: this coordinate system exhibits singularities at the poles.\n"
"\n"
"float64[9] position_covariance\n"
"\n"
"# If the covariance of the fix is known, fill it in completely. If the\n"
"# GPS receiver provides the variance of each measurement, put them\n"
"# along the diagonal. If only Dilution of Precision is available,\n"
"# estimate an approximate covariance from that.\n"
"\n"
"uint8 COVARIANCE_TYPE_UNKNOWN = 0\n"
"uint8 COVARIANCE_TYPE_APPROXIMATED = 1\n"
"uint8 COVARIANCE_TYPE_DIAGONAL_KNOWN = 2\n"
"uint8 COVARIANCE_TYPE_KNOWN = 3\n"
"\n"
"uint8 position_covariance_type\n"
"\n"
"================================================================================\n"
"MSG: sensor_msgs/NavSatStatus\n"
"# Navigation Satellite fix status for any Global Navigation Satellite System\n"
"\n"
"# Whether to output an augmented fix is determined by both the fix\n"
"# type and the last time differential corrections were received.  A\n"
"# fix is valid when status >= STATUS_FIX.\n"
"\n"
"int8 STATUS_NO_FIX =  -1        # unable to fix position\n"
"int8 STATUS_FIX =      0        # unaugmented fix\n"
"int8 STATUS_SBAS_FIX = 1        # with satellite-based augmentation\n"
"int8 STATUS_GBAS_FIX = 2        # with ground-based augmentation\n"
"\n"
"int8 status\n"
"\n"
"# Bits defining which Global Navigation Satellite System signals were\n"
"# used by the receiver.\n"
"\n"
"uint16 SERVICE_GPS =     1\n"
"uint16 SERVICE_GLONASS = 2\n"
"uint16 SERVICE_COMPASS = 4      # includes BeiDou.\n"
"uint16 SERVICE_GALILEO = 8\n"
"\n"
"uint16 service\n"
"\n"
"================================================================================\n"
"MSG: realm_msgs/PointCloud\n"
"######################################################\n"
"# A message containing basic REALM sparse cloud data #\n"
"######################################################\n"
"\n"
"# (required) Header containing message meta data\n"
"std_msgs/Header header\n"
"\n"
"# (required) Vector of unique point ids\n"
"uint32[] point_ids\n"
"\n"
"# (required) Data of the sparse cloud structured as cv::Mat with row(i) = x,y,z\n"
"sensor_msgs/Image points\n"
"================================================================================\n"
"MSG: sensor_msgs/Image\n"
"# This message contains an uncompressed image\n"
"# (0, 0) is at top-left corner of image\n"
"#\n"
"\n"
"Header header        # Header timestamp should be acquisition time of image\n"
"                     # Header frame_id should be optical frame of camera\n"
"                     # origin of frame should be optical center of camera\n"
"                     # +x should point to the right in the image\n"
"                     # +y should point down in the image\n"
"                     # +z should point into to plane of the image\n"
"                     # If the frame_id here and the frame_id of the CameraInfo\n"
"                     # message associated with the image conflict\n"
"                     # the behavior is undefined\n"
"\n"
"uint32 height         # image height, that is, number of rows\n"
"uint32 width          # image width, that is, number of columns\n"
"\n"
"# The legal values for encoding are in file src/image_encodings.cpp\n"
"# If you want to standardize a new string format, join\n"
"# ros-users@lists.sourceforge.net and send an email proposing a new encoding.\n"
"\n"
"string encoding       # Encoding of pixels -- channel meaning, ordering, size\n"
"                      # taken from the list of strings in include/sensor_msgs/image_encodings.h\n"
"\n"
"uint8 is_bigendian    # is this data bigendian?\n"
"uint32 step           # Full row length in bytes\n"
"uint8[] data          # actual matrix data, size is (step * rows)\n"
"\n"
"================================================================================\n"
"MSG: realm_msgs/Depthmap\n"
"##################################################\n"
"# A message containing basic REALM depthmap data #\n"
"##################################################\n"
"\n"
"# (required) Header containing message meta data\n"
"std_msgs/Header header\n"
"\n"
"# (required) Camera_model containing pinhole parameters of capturing cam\n"
"realm_msgs/Pinhole camera_model\n"
"\n"
"# (required) Pose during acquisition\n"
"geometry_msgs/Pose pose\n"
"\n"
"# (required) Depth information\n"
"sensor_msgs/Image data\n"
"================================================================================\n"
"MSG: geometry_msgs/Pose\n"
"# A representation of pose in free space, composed of position and orientation. \n"
"Point position\n"
"Quaternion orientation\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Point\n"
"# This contains the position of a point in free space\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"\n"
"================================================================================\n"
"MSG: realm_msgs/CvGridMap\n"
"# Header for time and frame\n"
"Header header\n"
"\n"
"# CvGridMap uni resolution in x-/y-dir\n"
"float64 resolution\n"
"\n"
"# CvGridMap position of roi\n"
"geometry_msgs/Point pos\n"
"\n"
"# CvGridMap length of roi in x\n"
"float64 length_x\n"
"\n"
"# CvGridMap length of roi in y\n"
"float64 length_y\n"
"\n"
"# CvGridMap layer names\n"
"string[] layers\n"
"\n"
"# CvGridMap layer data\n"
"sensor_msgs/Image[] data\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Float32\n"
"float32 data\n"
"================================================================================\n"
"MSG: realm_msgs/Georeference\n"
"#####################################################\n"
"# A message containing georeference informations    #\n"
"#####################################################\n"
"\n"
"# Following message is basically a similarity transformation\n"
"\n"
"geometry_msgs/Transform transform\n"
"std_msgs/Float64[] scale\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Transform\n"
"# This represents the transform between two coordinate frames in free space.\n"
"\n"
"Vector3 translation\n"
"Quaternion rotation\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Vector3\n"
"# This represents a vector in free space. \n"
"# It is only meant to represent a direction. Therefore, it does not\n"
"# make sense to apply a translation to it (e.g., when applying a \n"
"# generic rigid transformation to a Vector3, tf2 will only apply the\n"
"# rotation). If you want your data to be translatable too, use the\n"
"# geometry_msgs/Point message instead.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"================================================================================\n"
"MSG: std_msgs/Bool\n"
"bool data\n"
;
  }

  static const char* value(const ::realm_msgs::Frame_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::realm_msgs::Frame_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.camera_id);
      stream.next(m.stage_id);
      stream.next(m.timestamp);
      stream.next(m.imagedata);
      stream.next(m.camera_model);
      stream.next(m.orientation);
      stream.next(m.gpsdata);
      stream.next(m.sparse_cloud);
      stream.next(m.depthmap);
      stream.next(m.surface_model);
      stream.next(m.orthophoto);
      stream.next(m.heading);
      stream.next(m.visual_pose);
      stream.next(m.georeference);
      stream.next(m.do_reset);
      stream.next(m.has_accurate_pose);
      stream.next(m.is_keyframe);
      stream.next(m.is_georeferenced);
      stream.next(m.is_surface_elevated);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Frame_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::realm_msgs::Frame_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::realm_msgs::Frame_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "camera_id: ";
    s << std::endl;
    Printer< ::std_msgs::String_<ContainerAllocator> >::stream(s, indent + "  ", v.camera_id);
    s << indent << "stage_id: ";
    s << std::endl;
    Printer< ::std_msgs::UInt32_<ContainerAllocator> >::stream(s, indent + "  ", v.stage_id);
    s << indent << "timestamp: ";
    s << std::endl;
    Printer< ::std_msgs::UInt64_<ContainerAllocator> >::stream(s, indent + "  ", v.timestamp);
    s << indent << "imagedata: ";
    s << std::endl;
    Printer< ::sensor_msgs::CompressedImage_<ContainerAllocator> >::stream(s, indent + "  ", v.imagedata);
    s << indent << "camera_model: ";
    s << std::endl;
    Printer< ::realm_msgs::Pinhole_<ContainerAllocator> >::stream(s, indent + "  ", v.camera_model);
    s << indent << "orientation: ";
    s << std::endl;
    Printer< ::geometry_msgs::Quaternion_<ContainerAllocator> >::stream(s, indent + "  ", v.orientation);
    s << indent << "gpsdata: ";
    s << std::endl;
    Printer< ::sensor_msgs::NavSatFix_<ContainerAllocator> >::stream(s, indent + "  ", v.gpsdata);
    s << indent << "sparse_cloud: ";
    s << std::endl;
    Printer< ::realm_msgs::PointCloud_<ContainerAllocator> >::stream(s, indent + "  ", v.sparse_cloud);
    s << indent << "depthmap: ";
    s << std::endl;
    Printer< ::realm_msgs::Depthmap_<ContainerAllocator> >::stream(s, indent + "  ", v.depthmap);
    s << indent << "surface_model: ";
    s << std::endl;
    Printer< ::realm_msgs::CvGridMap_<ContainerAllocator> >::stream(s, indent + "  ", v.surface_model);
    s << indent << "orthophoto: ";
    s << std::endl;
    Printer< ::realm_msgs::CvGridMap_<ContainerAllocator> >::stream(s, indent + "  ", v.orthophoto);
    s << indent << "heading: ";
    s << std::endl;
    Printer< ::std_msgs::Float32_<ContainerAllocator> >::stream(s, indent + "  ", v.heading);
    s << indent << "visual_pose: ";
    s << std::endl;
    Printer< ::geometry_msgs::Pose_<ContainerAllocator> >::stream(s, indent + "  ", v.visual_pose);
    s << indent << "georeference: ";
    s << std::endl;
    Printer< ::realm_msgs::Georeference_<ContainerAllocator> >::stream(s, indent + "  ", v.georeference);
    s << indent << "do_reset: ";
    s << std::endl;
    Printer< ::std_msgs::Bool_<ContainerAllocator> >::stream(s, indent + "  ", v.do_reset);
    s << indent << "has_accurate_pose: ";
    s << std::endl;
    Printer< ::std_msgs::Bool_<ContainerAllocator> >::stream(s, indent + "  ", v.has_accurate_pose);
    s << indent << "is_keyframe: ";
    s << std::endl;
    Printer< ::std_msgs::Bool_<ContainerAllocator> >::stream(s, indent + "  ", v.is_keyframe);
    s << indent << "is_georeferenced: ";
    s << std::endl;
    Printer< ::std_msgs::Bool_<ContainerAllocator> >::stream(s, indent + "  ", v.is_georeferenced);
    s << indent << "is_surface_elevated: ";
    s << std::endl;
    Printer< ::std_msgs::Bool_<ContainerAllocator> >::stream(s, indent + "  ", v.is_surface_elevated);
  }
};

} // namespace message_operations
} // namespace ros

#endif // REALM_MSGS_MESSAGE_FRAME_H
